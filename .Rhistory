#
# #using the test data
# predicted <- round(predict(modelTest, samTest))
# predicted <- replace(predicted, predicted==0,1)
# predicted <- replace(predicted, predicted>6,6)
# actual <- as.numeric(samTest$activity)
# RMSD <- sqrt(sum((actual-predicted)^2)/length(actual))
#
# rsq <- 1-sum((actual-predicted)^2)/sum((actual-mean(actual))^2)
# print(rsq)
# print(RMSD)
# print(RMSD/mean(actual))
# print(paste0("Prediction error: ", as.character(round(RMSD/(max(actual)-min(actual)),3)*100),"%"))
# #http://en.wikipedia.org/wiki/Root-mean-square_deviation
#
# #png("IntRatePrediction.png", width=480, height=400, units= "px")
# plot(jitter(actual), jitter(predicted),
#      main = "Activity: actual vs. predicted (test)", cex.main = 1,
#      cex.axis=0.75, yaxt = "n", xaxt = "n",
#      bty= "n", ylab = "predicted",
#      xlab = "actual",
#      col=rgb(0,100,0,30,maxColorValue=255), pch=16)
# axis(1, at=actual
#      , lab=samTest$activity
#      , las = TRUE, cex.axis=0.75)
# axis(2, at=actual
#      , lab=samTest$activity
#      , las = FALSE, cex.axis=0.75)
# abline(0,1, col="red")
#
# rm(actual, model, predicted, rsq, RMSD)
library(tree)
statsByAct <- t(apply(samTrain[ , 1:561], 2,
function(col) tapply(col,
INDEX =samTrain$activity,
FUN=mean)))
statsByAct <- statsByAct[! duplicated(statsByAct),]
statsStDev <- apply(statsByAct, 1, sd)
statsStDevOr <- order(statsStDev, decreasing=TRUE)
statsStDev <- statsStDev[statsStDevOr]
VariablesNoStep1 <- 5
VariablesNoStep2 <- 10
VariablesNoStep3 <- 10
#VariablesNoStep4 <- 1
varNamesArr1 <- names(head(statsStDev, VariablesNoStep1))
varNamesSet1 <- paste(names(head(statsStDev, VariablesNoStep1)), collapse="+")
statsStDev <- apply(statsByAct[,1:3], 1, sd)
statsStDevOr <- order(statsStDev, decreasing=TRUE)
statsStDev <- statsStDev[statsStDevOr]
varNamesArr2 <- names(head(statsStDev, VariablesNoStep2))
varNamesSet2 <- paste(names(head(statsStDev, VariablesNoStep2)), collapse="+")
statsStDev <- apply(statsByAct[,4:6], 1, sd)
statsStDevOr <- order(statsStDev, decreasing=TRUE)
statsStDev <- statsStDev[statsStDevOr]
varNamesArr3 <- names(head(statsStDev, VariablesNoStep3))
varNamesSet3 <- paste(names(head(statsStDev, VariablesNoStep3)), collapse="+")
#statsStDev <- apply(statsByAct[,c(4,6)], 1, sd)
#statsStDevOr <- order(statsStDev, decreasing=TRUE)
#statsStDev <- statsStDev[statsStDevOr]
#varNamesArr4 <- names(head(statsStDev, VariablesNoStep4))
#varNamesSet4 <- paste(names(head(statsStDev, VariablesNoStep4)), collapse="+")
varNamesArr <- c(varNamesArr1,varNamesArr2,varNamesArr3)#, varNamesArr4 )
print(paste("Duplicate variables:", sum(duplicated(varNamesArr))))
varNames <- paste(varNamesSet1, varNamesSet2, varNamesSet3, sep = "+")
#, varNamesSet4)
lm.formula <- as.formula(paste0("activity ~ ",varNames))
rm(statsStDevOr, statsByAct)
rm(list= ls(pattern="varName."))
modelTest <- tree(lm.formula, data = samTrain)
modelStep <- modelTest
summary(modelStep)
rm(modelTest)
plot(modelStep)
text(modelStep, cex=0.5)
png("pruningTree.png")
par(mfrow=c(1,2))
plot(cv.tree(modelStep, FUN=prune.tree, method="misclass"))
plot(cv.tree(modelStep))
par(mfrow=c(1,1))
dev.off()
pruneTree <- prune.tree(modelStep, best=8)
png("finalTree.png")
plot(pruneTree)
text(pruneTree, cex=0.7)
dev.off()
summary(pruneTree)
predicted <- predict(pruneTree, samTrain, type="class")
actual <- samTrain$activity
table(actual, predicted)
rm(lm.formula, statsStDev, modelStep)
predictedNo <- as.numeric(predicted)
actualNo <- as.numeric(samTrain$activity)
RMSD <- sqrt(sum((actualNo-predictedNo)^2)/length(actualNo))
rsq <- 1-sum((actualNo-predictedNo)^2)/sum((actualNo-mean(actualNo))^2)
print(rsq)
print(RMSD)
print(RMSD/mean(actualNo))
print(paste0("Prediction error: ", as.character(round(RMSD/(max(actualNo)-min(actualNo)),3)*100),"%"))
IdOk <- sum(actualNo==predictedNo)/length(actualNo)
print(paste0("Identified: ", as.character(round(IdOk,3)*100), "%"))
#http://en.wikipedia.org/wiki/Root-mean-square_deviation
#png("TrainPrediction_tripleSel_StDev.png", width=640, height=640, units= "px")
plot(jitter(actualNo), jitter(predictedNo),
main = "Activity: actual vs. predicted (train)", cex.main = 1,
yaxt = "n", xaxt = "n",
cex.axis=0.75,
bty= "n", ylab = "predicted",
xlab = "actual",
col=rgb(0, 100, 0, 30, maxColorValue=255), pch=16)
axis(1, at=actual
, lab=samTrain$activity
, las = TRUE, cex.axis=0.75)
axis(2, at=actual
, lab=samTrain$activity
, las = FALSE, cex.axis=0.75)
abline(0,1, col="red")
#dev.off()
#using the test data
predicted <- predict(pruneTree, samTest, type="class")
actual <- samTest$activity
table(actual, predicted)
predictedNo <- as.numeric(predicted)
actualNo <- as.numeric(samTest$activity)
RMSD <- sqrt(sum((actualNo-predictedNo)^2)/length(actualNo))
rsq <- 1-sum((actualNo-predictedNo)^2)/sum((actualNo-mean(actualNo))^2)
print(rsq)
print(RMSD)
print(RMSD/mean(actualNo))
print(paste0("Prediction error: ", as.character(round(RMSD/(max(actualNo)-min(actualNo)),3)*100),"%"))
IdOk <- sum(actualNo==predictedNo)/length(actualNo)
print(paste0("Identified: ", as.character(round(IdOk,3)*100), "%"))
#http://en.wikipedia.org/wiki/Root-mean-square_deviation
png("TestFinalTree.png", width=640, height=640, units= "px")
plot(jitter(actualNo), jitter(predictedNo),
main = "Activity: test set - final Tree (8 leaves, 7 variables)", cex.main = 1,
cex.axis=0.75, yaxt = "n", xaxt = "n",
bty= "n", ylab = "predicted",
xlab = "actual",
col=rgb(0,100,0,30,maxColorValue=255), pch=16)
axis(1, at=actual
, lab=samTest$activity
, las = TRUE, cex.axis=0.75)
axis(2, at=actual
, lab=samTest$activity
, las = FALSE, cex.axis=0.75)
abline(0,1, col="red")
dev.off()
rm(actual, IdOk, predicted, rsq, RMSD, pruneTree, predictedNo, actualNo)
install.packages("randomForest")
library(randomForest)
statsByAct <- t(apply(samTrain[ , 1:561], 2,
function(col) tapply(col,
INDEX =samTrain$activity,
FUN=mean)))
statsByAct <- statsByAct[! duplicated(statsByAct),]
statsStDev <- apply(statsByAct, 1, sd)
statsStDevOr <- order(statsStDev, decreasing=TRUE)
statsStDev <- statsStDev[statsStDevOr]
VariablesNoStep1 <- 5
VariablesNoStep2 <- 10
VariablesNoStep3 <- 10
#VariablesNoStep4 <- 1
varNamesArr1 <- names(head(statsStDev, VariablesNoStep1))
varNamesSet1 <- paste(names(head(statsStDev, VariablesNoStep1)), collapse="+")
statsStDev <- apply(statsByAct[,1:3], 1, sd)
statsStDevOr <- order(statsStDev, decreasing=TRUE)
statsStDev <- statsStDev[statsStDevOr]
varNamesArr2 <- names(head(statsStDev, VariablesNoStep2))
varNamesSet2 <- paste(names(head(statsStDev, VariablesNoStep2)), collapse="+")
statsStDev <- apply(statsByAct[,4:6], 1, sd)
statsStDevOr <- order(statsStDev, decreasing=TRUE)
statsStDev <- statsStDev[statsStDevOr]
varNamesArr3 <- names(head(statsStDev, VariablesNoStep3))
varNamesSet3 <- paste(names(head(statsStDev, VariablesNoStep3)), collapse="+")
#statsStDev <- apply(statsByAct[,c(4,6)], 1, sd)
#statsStDevOr <- order(statsStDev, decreasing=TRUE)
#statsStDev <- statsStDev[statsStDevOr]
#varNamesArr4 <- names(head(statsStDev, VariablesNoStep4))
#varNamesSet4 <- paste(names(head(statsStDev, VariablesNoStep4)), collapse="+")
varNamesArr <- c(varNamesArr1,varNamesArr2,varNamesArr3)#, varNamesArr4 )
print(paste("Duplicate variables:", sum(duplicated(varNamesArr))))
varNames <- paste(varNamesSet1, varNamesSet2, varNamesSet3, sep = "+")
#, varNamesSet4)
lm.formula <- as.formula(paste0("activity ~ ",varNames))
rm(statsStDevOr, statsByAct)
rm(list= ls(pattern="varName."))
modelTest <- randomForest(lm.formula, data = samTrain)
summary(modelTest)
modelTest
plot(modelTest)
text(modelTest, cex=0.7)
library(randomForest)
statsByAct <- t(apply(samTrain[ , 1:561], 2,
function(col) tapply(col,
INDEX =samTrain$activity,
FUN=mean)))
statsByAct <- statsByAct[! duplicated(statsByAct),]
statsStDev <- apply(statsByAct, 1, sd)
statsStDevOr <- order(statsStDev, decreasing=TRUE)
statsStDev <- statsStDev[statsStDevOr]
VariablesNoStep1 <- 5
VariablesNoStep2 <- 10
VariablesNoStep3 <- 10
#VariablesNoStep4 <- 1
varNamesArr1 <- names(head(statsStDev, VariablesNoStep1))
varNamesSet1 <- paste(names(head(statsStDev, VariablesNoStep1)), collapse="+")
statsStDev <- apply(statsByAct[,1:3], 1, sd)
statsStDevOr <- order(statsStDev, decreasing=TRUE)
statsStDev <- statsStDev[statsStDevOr]
varNamesArr2 <- names(head(statsStDev, VariablesNoStep2))
varNamesSet2 <- paste(names(head(statsStDev, VariablesNoStep2)), collapse="+")
statsStDev <- apply(statsByAct[,4:6], 1, sd)
statsStDevOr <- order(statsStDev, decreasing=TRUE)
statsStDev <- statsStDev[statsStDevOr]
varNamesArr3 <- names(head(statsStDev, VariablesNoStep3))
varNamesSet3 <- paste(names(head(statsStDev, VariablesNoStep3)), collapse="+")
#statsStDev <- apply(statsByAct[,c(4,6)], 1, sd)
#statsStDevOr <- order(statsStDev, decreasing=TRUE)
#statsStDev <- statsStDev[statsStDevOr]
#varNamesArr4 <- names(head(statsStDev, VariablesNoStep4))
#varNamesSet4 <- paste(names(head(statsStDev, VariablesNoStep4)), collapse="+")
varNamesArr <- c(varNamesArr1,varNamesArr2,varNamesArr3)#, varNamesArr4 )
print(paste("Duplicate variables:", sum(duplicated(varNamesArr))))
varNames <- paste(varNamesSet1, varNamesSet2, varNamesSet3, sep = "+")
#, varNamesSet4)
lm.formula <- as.formula(paste0("activity ~ ",varNames))
rm(statsStDevOr, statsByAct)
rm(list= ls(pattern="varName."))
modelTest <- randomForest(lm.formula, data = samTrain)
modelTest
plot(modelTest)
predicted <- predict(modelTest, samTrain, type="class")
actual <- samTrain$activity
table(actual, predicted)
rm(lm.formula, statsStDev)
predictedNo <- as.numeric(predicted)
actualNo <- as.numeric(samTrain$activity)
RMSD <- sqrt(sum((actualNo-predictedNo)^2)/length(actualNo))
rsq <- 1-sum((actualNo-predictedNo)^2)/sum((actualNo-mean(actualNo))^2)
print(rsq)
print(RMSD)
print(RMSD/mean(actualNo))
print(paste0("Prediction error: ", as.character(round(RMSD/(max(actualNo)-min(actualNo)),3)*100),"%"))
IdOk <- sum(actualNo==predictedNo)/length(actualNo)
print(paste0("Identified: ", as.character(round(IdOk,3)*100), "%"))
#http://en.wikipedia.org/wiki/Root-mean-square_deviation
#png("TrainPrediction_tripleSel_StDev.png", width=640, height=640, units= "px")
plot(jitter(actualNo), jitter(predictedNo),
main = "Activity: actual vs. predicted (train)", cex.main = 1,
yaxt = "n", xaxt = "n",
cex.axis=0.75,
bty= "n", ylab = "predicted",
xlab = "actual",
col=rgb(0, 100, 0, 30, maxColorValue=255), pch=16)
axis(1, at=actual
, lab=samTrain$activity
, las = TRUE, cex.axis=0.75)
axis(2, at=actual
, lab=samTrain$activity
, las = FALSE, cex.axis=0.75)
abline(0,1, col="red")
#dev.off()
#using the test data
predicted <- predict(modelTree, samTest, type="class")
actual <- samTest$activity
table(actual, predicted)
predictedNo <- as.numeric(predicted)
actualNo <- as.numeric(samTest$activity)
RMSD <- sqrt(sum((actualNo-predictedNo)^2)/length(actualNo))
rsq <- 1-sum((actualNo-predictedNo)^2)/sum((actualNo-mean(actualNo))^2)
print(rsq)
print(RMSD)
print(RMSD/mean(actualNo))
print(paste0("Prediction error: ", as.character(round(RMSD/(max(actualNo)-min(actualNo)),3)*100),"%"))
IdOk <- sum(actualNo==predictedNo)/length(actualNo)
print(paste0("Identified: ", as.character(round(IdOk,3)*100), "%"))
#http://en.wikipedia.org/wiki/Root-mean-square_deviation
png("TestFinalTree.png", width=640, height=640, units= "px")
plot(jitter(actualNo), jitter(predictedNo),
main = "Activity: test set - final Tree (8 leaves, 7 variables)", cex.main = 1,
cex.axis=0.75, yaxt = "n", xaxt = "n",
bty= "n", ylab = "predicted",
xlab = "actual",
col=rgb(0,100,0,30,maxColorValue=255), pch=16)
axis(1, at=actual
, lab=samTest$activity
, las = TRUE, cex.axis=0.75)
axis(2, at=actual
, lab=samTest$activity
, las = FALSE, cex.axis=0.75)
abline(0,1, col="red")
dev.off()
rm(actual, IdOk, predicted, rsq, RMSD, pruneTree, predictedNo, actualNo)
library(randomForest)
statsByAct <- t(apply(samTrain[ , 1:561], 2,
function(col) tapply(col,
INDEX =samTrain$activity,
FUN=mean)))
statsByAct <- statsByAct[! duplicated(statsByAct),]
statsStDev <- apply(statsByAct, 1, sd)
statsStDevOr <- order(statsStDev, decreasing=TRUE)
statsStDev <- statsStDev[statsStDevOr]
VariablesNoStep1 <- 5
VariablesNoStep2 <- 10
VariablesNoStep3 <- 10
#VariablesNoStep4 <- 1
varNamesArr1 <- names(head(statsStDev, VariablesNoStep1))
varNamesSet1 <- paste(names(head(statsStDev, VariablesNoStep1)), collapse="+")
statsStDev <- apply(statsByAct[,1:3], 1, sd)
statsStDevOr <- order(statsStDev, decreasing=TRUE)
statsStDev <- statsStDev[statsStDevOr]
varNamesArr2 <- names(head(statsStDev, VariablesNoStep2))
varNamesSet2 <- paste(names(head(statsStDev, VariablesNoStep2)), collapse="+")
statsStDev <- apply(statsByAct[,4:6], 1, sd)
statsStDevOr <- order(statsStDev, decreasing=TRUE)
statsStDev <- statsStDev[statsStDevOr]
varNamesArr3 <- names(head(statsStDev, VariablesNoStep3))
varNamesSet3 <- paste(names(head(statsStDev, VariablesNoStep3)), collapse="+")
#statsStDev <- apply(statsByAct[,c(4,6)], 1, sd)
#statsStDevOr <- order(statsStDev, decreasing=TRUE)
#statsStDev <- statsStDev[statsStDevOr]
#varNamesArr4 <- names(head(statsStDev, VariablesNoStep4))
#varNamesSet4 <- paste(names(head(statsStDev, VariablesNoStep4)), collapse="+")
varNamesArr <- c(varNamesArr1,varNamesArr2,varNamesArr3)#, varNamesArr4 )
print(paste("Duplicate variables:", sum(duplicated(varNamesArr))))
varNames <- paste(varNamesSet1, varNamesSet2, varNamesSet3, sep = "+")
#, varNamesSet4)
lm.formula <- as.formula(paste0("activity ~ ",varNames))
rm(statsStDevOr, statsByAct)
rm(list= ls(pattern="varName."))
modelTest <- randomForest(lm.formula, data = samTrain)
modelTest
plot(modelTest)
predicted <- predict(modelTest, samTrain, type="class")
actual <- samTrain$activity
table(actual, predicted)
rm(lm.formula, statsStDev)
predictedNo <- as.numeric(predicted)
actualNo <- as.numeric(samTrain$activity)
RMSD <- sqrt(sum((actualNo-predictedNo)^2)/length(actualNo))
rsq <- 1-sum((actualNo-predictedNo)^2)/sum((actualNo-mean(actualNo))^2)
print(rsq)
print(RMSD)
print(RMSD/mean(actualNo))
print(paste0("Prediction error: ", as.character(round(RMSD/(max(actualNo)-min(actualNo)),3)*100),"%"))
IdOk <- sum(actualNo==predictedNo)/length(actualNo)
print(paste0("Identified: ", as.character(round(IdOk,3)*100), "%"))
#http://en.wikipedia.org/wiki/Root-mean-square_deviation
#png("TrainPrediction_tripleSel_StDev.png", width=640, height=640, units= "px")
plot(jitter(actualNo), jitter(predictedNo),
main = "Activity: actual vs. predicted (train)", cex.main = 1,
yaxt = "n", xaxt = "n",
cex.axis=0.75,
bty= "n", ylab = "predicted",
xlab = "actual",
col=rgb(0, 100, 0, 30, maxColorValue=255), pch=16)
axis(1, at=actual
, lab=samTrain$activity
, las = TRUE, cex.axis=0.75)
axis(2, at=actual
, lab=samTrain$activity
, las = FALSE, cex.axis=0.75)
abline(0,1, col="red")
#dev.off()
#using the test data
predicted <- predict(modelTest, samTest, type="class")
actual <- samTest$activity
table(actual, predicted)
predictedNo <- as.numeric(predicted)
actualNo <- as.numeric(samTest$activity)
RMSD <- sqrt(sum((actualNo-predictedNo)^2)/length(actualNo))
rsq <- 1-sum((actualNo-predictedNo)^2)/sum((actualNo-mean(actualNo))^2)
print(rsq)
print(RMSD)
print(RMSD/mean(actualNo))
print(paste0("Prediction error: ", as.character(round(RMSD/(max(actualNo)-min(actualNo)),3)*100),"%"))
IdOk <- sum(actualNo==predictedNo)/length(actualNo)
print(paste0("Identified: ", as.character(round(IdOk,3)*100), "%"))
#http://en.wikipedia.org/wiki/Root-mean-square_deviation
#png("TestFinalTree.png", width=640, height=640, units= "px")
plot(jitter(actualNo), jitter(predictedNo),
main = "Activity: test set - final Tree (8 leaves, 7 variables)", cex.main = 1,
cex.axis=0.75, yaxt = "n", xaxt = "n",
bty= "n", ylab = "predicted",
xlab = "actual",
col=rgb(0,100,0,30,maxColorValue=255), pch=16)
axis(1, at=actual
, lab=samTest$activity
, las = TRUE, cex.axis=0.75)
axis(2, at=actual
, lab=samTest$activity
, las = FALSE, cex.axis=0.75)
abline(0,1, col="red")
#dev.off()
rm(actual, IdOk, predicted, rsq, RMSD, pruneTree, predictedNo, actualNo)
set.seed(53535)
xValues = seq(0,2*pi,length=100)
yValues = rnorm(100) + sin(xValues)
install.packages("splines")
library(splines)
?rmse
rmse <- function(actual, predicted) {
return sqrt(sum((actual-predicted)^2))
}
rmse <- function(actual, predicted) {
return sqrt(sum((actual-predicted)^2))
}
rmse <- function(actual, predicted) {
return(sqrt(sum((actual-predicted)^2)))
}
rmse(c(1,2,3), c(4,5,6))
c(1,2,3)-c(4,5,6)
(c(1,2,3)-c(4,5,6))^2
sum((c(1,2,3)-c(4,5,6))^2)
sqrt(27)
rmse <- function(actual, predicted) {
return(sqrt(sum((actual-predicted)^2)/lenght(actual)))
}
rmse(c(1,2,3), c(4,5,6))
rmse <- function(actual, predicted) {
return(sqrt(sum((actual-predicted)^2)/length(actual)))
}
rmse(c(1,2,3), c(4,5,6))
library(splines)
set.seed(53535)
xValues = seq(0,2*pi,length=100)
yValues = rnorm(100) + sin(xValues)
for(i = 1:10) {
ns1 <- ns(xValues, df = i)
lmsp <- lm(yValues ~ ns1)
parse0(i, ": ", rmse(yValues, predict(lmsp, xValues))
}
for(i in 1:10) {
ns1 <- ns(xValues, df = i)
lmsp <- lm(yValues ~ ns1)
parse0(i, ": ", rmse(yValues, predict(lmsp, xValues))
}
for(i in 1:10) {
ns1 <- ns(xValues, df = i)
lmsp <- lm(yValues ~ ns1)
parse0(i, ": ", rmse(yValues, predict(lmsp, xValues)))
}
for(i in 1:10) {
ns1 <- ns(xValues, df = i)
lmsp <- lm(yValues ~ ns1)
paste0(i, ": ", rmse(yValues, predict(lmsp, xValues)))
}
?predict
ns1 <- ns(xValues, df = 1)
lmsp <- lm(yValues ~ ns1)
predict(lmsp, xValues)
summary(lmsp)
ns1 <- ns(xValues, df = 2)
lmsp <- lm(yValues ~ ns1)
summary(lmsp)
lmsp$fitted
for(i in 1:10) {
ns1 <- ns(xValues, df = i)
lmsp <- lm(yValues ~ ns1)
paste0(i, ": ", rmse(yValues, lmsp$fitted)))
}
for(i in 1:10) {
ns1 <- ns(xValues, df = i)
lmsp <- lm(yValues ~ ns1)
paste0(i, ": ", rmse(yValues, lmsp$fitted))
}
for(i in 1:10) {
ns1 <- ns(xValues, df = i)
lmsp <- lm(yValues ~ ns1)
print(paste0(i, ": ", rmse(yValues, lmsp$fitted)))
}
install.packages("simpleboot")
library(simpleboot)
data(airquality)
attach(airquality)
names(airquality)
quantile(airquality$Wind, 0.75)
? one.boot
quantile(airquality$Wind, 0.75)
set.seed(883833)
getQntl <- function(x) {quantile(x, 0.75)}
one.boot(airquality$Wind, getQntl, R=1000)
?one.boot
qntlBoot <- one.boot(airquality$Wind, getQntl, R=1000)
print(qntlBoot)
boot.ci(qntlBoot)
boot.se(qntlBoot)
qntlBoot
names(qntlBoot)
qntlBoot$statistic
qntlBoot$statistic
print(qntlBoot$statistic)
qntlBoot$data
qntlBoot$t
sd(qntlBoot$t)
?sd
data(airquality)
attach(airquality)
names(airquality)
quantile(airquality$Wind, 0.75)
set.seed(883833)
getQntl <- function(x) {quantile(x, 0.75)}
qntlBoot <- one.boot(airquality$Wind, getQntl, R=1000)
sd(qntlBoot$t)
set.seed(883833)
getQntl <- function(x,i) {quantile(x[i], 0.75)}
qntlBoot <- boot(airquality$Wind, getQntl, R=1000)
qntlBoot
data(Cars93,package="MASS")
install.packages("ipred")
library(ipred)
?bagging
