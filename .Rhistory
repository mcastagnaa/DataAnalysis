data=rawdata, type=c("p","r"), col = "black")
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type=c("p","r")
panel.points(pch = 21, col = "black")
panel.lines(col = "black"))
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type=c("p","r"),
panel.points(pch = 21, col = "black"),
panel.lines(col = "black"))
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type=c("p","r"),
panel.points(FICOmid, InterestRate, pch = 21, col = "black"),
panel.lines(FICOmid, InterestRate, col = "red"))
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type=c("p","r"),
panel.points(rawdata$FICOmid, rawdata$InterestRate, pch = 21, col = "black"),
panel.lines(rawdata$FICOmid, rawdata$InterestRate, col = "red"))
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21, fill = my.fill,col = "black")
panel.lmline(x,y,col = "salmon")}
)
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "salmon")}
)
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "red")}
)
?png
png("latticeRegr.png, width= 480, height= 360")
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "red")}
)
dev.off()
png("latticeRegr.png", width= 480, height= 360)
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "red")}
)
png("latticeRegr.png")#, width= 480, height= 360)
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "red")}
)
dev.off()
png("latticeRegr.png", width = 480, height = 360, units = "px")
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "red")}
)
dev.off()
png("latticeRegr.png", width = 600, height = 360, units = "px")
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "red")}
)
dev.off()
png("IntRatePrediction.png", width=480, height=480, units= "px")
plot(actual, predicted,
main = "Interest rate: actual vs. predicted", cex.main = 1,
yaxt = "n", xaxt = "n", cex.axis=0.75,
xlim=c(0, 0.28), ylim=c(0, 0.28), bty= "n")
axis(2, at=pretty(predicted)
, lab=paste0(pretty(predicted)*100, "%")
, las = TRUE, cex.axis=0.75)
axis(1, at=pretty(actual)
, lab=paste0(pretty(actual)*100, "%")
, las = TRUE, cex.axis=0.75)
abline(0,1, col="red")
dev.off()
# [1] "Requested"        "Funded"           "InterestRate"     "LoanLength"
# [5] "LoanPurpose"      "DebtToIncome"     "State"            "HomeOwnership"
# [9] "MonthlyIncome"    "FICORange"        "OpenLines"        "RevolvingBalance"
# [13] "Inquiries"        "EmploymentLength" "EmpLengthNum"     "LoanLengthFac"
# [17] "HomeOwnershipFac" "LoanPurposeFac"   "FICORangeFac"     "StateFac"
# [21] "BalToIncome"      "FundedPerc"       "FICOmid"          "LoanPurposeFreq"
# http://gettinggeneticsdone.blogspot.co.uk/2011/02/split-data-frame-into-testing-and.html
options(show.signif.stars = F)
completeSet <- rawdata[complete.cases(rawdata),]
set.seed(12345)
index <- 1:nrow(completeSet)
trainindex <- sample(index, trunc(length(index)/2))
trainset <- completeSet[trainindex, ]
testset <- completeSet[-trainindex, ]
str(trainset)
str(testset)
model1 <- lm(InterestRate ~
FICOmid
+ LoanLengthFac
+ OpenLines
+ Funded
+ Inquiries
+ MonthlyIncome
, data = trainset)
predicted <- predict(model1, testset)
actual <- testset$InterestRate
RMSD <- sqrt(sum((actual-predicted)^2)/length(actual))
rsq <- 1-sum((actual-predicted)^2)/sum((actual-mean(actual))^2)
print(rsq)
print(RMSD)
print(RMSD/mean(actual))
print(paste0("Prediction error: ", as.character(round(RMSD/(max(actual)-min(actual)),3)*100),"%"))
#http://en.wikipedia.org/wiki/Root-mean-square_deviation
png("IntRatePrediction.png", width=480, height=480, units= "px")
plot(actual, predicted,
main = "Interest rate: actual vs. predicted", cex.main = 1,
yaxt = "n", xaxt = "n", cex.axis=0.75,
xlim=c(0, 0.28), ylim=c(0, 0.28), bty= "n")
axis(2, at=pretty(predicted)
, lab=paste0(pretty(predicted)*100, "%")
, las = TRUE, cex.axis=0.75)
axis(1, at=pretty(actual)
, lab=paste0(pretty(actual)*100, "%")
, las = TRUE, cex.axis=0.75)
abline(0,1, col="red")
dev.off()
png("IntRatePrediction.png", width=480, height=400, units= "px")
plot(actual, predicted,
main = "Interest rate: actual vs. predicted", cex.main = 1,
yaxt = "n", xaxt = "n", cex.axis=0.75,
xlim=c(0, 0.28), ylim=c(0, 0.28), bty= "n")
axis(2, at=pretty(predicted)
, lab=paste0(pretty(predicted)*100, "%")
, las = TRUE, cex.axis=0.75)
axis(1, at=pretty(actual)
, lab=paste0(pretty(actual)*100, "%")
, las = TRUE, cex.axis=0.75)
abline(0,1, col="red")
dev.off()
data(warpbreaks)
names(warpbreaks)
anova(breaks ~ wool + tension, data= warpbreaks)
?anova
aov(breaks ~ wool + tension, data= warpbreaks)
anova1<-aov(breaks ~ wool + tension, data= warpbreaks)
summary(anova1)
library(glm2)
data(crabs)
install.packages("glm2")
library(glm2)
data(crabs)
data(quine)
lm1 = lm(log(Days + 2.5) ~.,data=quine)
step(lm1)
install.packages("quine")
install.packages("MASS")
library(MASS)
data(quine)
lm1 = lm(log(Days + 2.5) ~.,data=quine)
step(lm1)
names(crabs)
glm1 <- glm(Satellites ~ Width, data = crabs, family = "Poisson")
glm1 <- glm(Satellites ~ Width, data = crabs, family = "poisson")
summary(glm1)
glm1$coeff
glm1$coeff[2]
ln(glm1$coeff[2])
log(glm1$coeff[2])
exp(glm1$coeff[2])
exp(glm1$coeff[1] + glm1$coeff[2] * 22)
dataURL <- "https://spark-public.s3.amazonaws.com/dataanalysis/samsungData.rda"
dataFile <- "./downloads/samsungData.rda"
download.file(dataUrl, dataFile)
datadownloaded <- date()
print(datadownloaded)
SamData <- load(dataFile)
dataURL <- "https://spark-public.s3.amazonaws.com/dataanalysis/samsungData.rda"
dataFile <- "./downloads/samsungData.rda"
download.file(dataURL, dataFile)
datadownloaded <- date()
print(datadownloaded)
SamData <- load(dataFile)
rm(SamData, dataFile, dataURL)
dataFile <- "./downloads/samsungData.rda"
load(dataFile)
rm(dataFile)
names(samsungData)
table(subject)
table(samsungData$subject)
table(samsungData$activity)
class(samsungData$subject)
otherSubj <- samsungData[! samsungData$subject %in%
c(fixTrain, fixTest),
"subject"]
fixTrain <- c(1, 3, 5, 6)
fixTest <- c(27, 28, 29, 30)
otherSubj <- samsungData[! samsungData$subject %in%
c(fixTrain, fixTest),
"subject"]
otherSubj <- unique(samsungData[! samsungData$subject %in%
c(fixTrain, fixTest),
"subject"])
otherSubj
set.seed(1234)
index <- 1:nrow(otherSubj)
trainindex <- sample(index, trunc(length(index)/2))
otherTrain <- otherSubj[trainindex, ]
otherTest <- otherSubj[-trainindex, ]
subjTrain <- c(fixTrain, otherTrain)
subjTest <- c(fixTest, otherTest)
index <- 1:length(otherSubj)
trainindex <- sample(index, trunc(length(index)/2))
otherTrain <- otherSubj[trainindex, ]
otherTrain <- otherSubj[trainindex]
otherTest <- otherSubj[-trainindex]
subjTrain <- c(fixTrain, otherTrain)
subjTest <- c(fixTest, otherTest)
subjTrain
subjTest
trainindex <- sample(index, round(length(index)/2))
otherTrain <- otherSubj[trainindex]
otherTest <- otherSubj[-trainindex]
subjTrain <- c(fixTrain, otherTrain)
subjTest <- c(fixTest, otherTest)
subjTrain
subjTest
?round
subjTest
round(4.5)
ceiling(4.5)
index <- 1:length(otherSubj)
trainindex <- sample(index, ceiling(length(index)/2))
otherTrain <- otherSubj[trainindex]
otherTest <- otherSubj[-trainindex]
subjTrain <- c(fixTrain, otherTrain)
subjTest <- c(fixTest, otherTest)
subjTrain
subjTest
rm(list= ls(patter="other."))
rm(list= ls(patter="fix."))
rm(trainindex, index)
samTrain <- na.omit(samsungData[samsungData$subject %in% subjTrain, ])
samTest <- na.omit(samsungData[samsungData$subject %in% subjTest, ])
rm(trainindex, index, samsungData)
rm(list= ls(patter="subj."))
library(MASS)
library(glm)
library(glm2)
glm1 <- glm(activity ~ >, data = samTrain, family = "poisson")
glm1 <- glm(activity ~ ., data = samTrain, family = "poisson")
names(samTrain)
summary(samTrain[,c(317, 331)])
?sort
dataFile <- "./downloads/samsungData.rda"
# download.file(dataURL, dataFile)
# datadownloaded <- date()
# print(datadownloaded)
# rm(SamData, dataURL)
library(MASS)
library(ggplot2)
load(dataFile)
rm(dataFile)
source("Ass2_renameDupCols.R")
names(samsungData) <- names(fixDupCols(samsungData))
names(samsungData)
table(samsungData$subject)
table(samsungData$activity)
fixTrain <- c(1, 3, 5, 6)
fixTest <- c(27, 28, 29, 30)
otherSubj <- unique(samsungData[! samsungData$subject %in%
c(fixTrain, fixTest),
"subject"])
set.seed(1234)
index <- 1:length(otherSubj)
trainindex <- sample(index, ceiling(length(index)/2))
otherTrain <- otherSubj[trainindex]
otherTest <- otherSubj[-trainindex]
subjTrain <- c(fixTrain, otherTrain)
subjTest <- c(fixTest, otherTest)
samTrain <- na.omit(samsungData[samsungData$subject %in% subjTrain, ])
samTest <- na.omit(samsungData[samsungData$subject %in% subjTest, ])
rm(list= ls(patter="other."))
rm(list= ls(patter="fix."))
rm(list= ls(patter="subj."))
rm(trainindex, index, samsungData)
glm1 <- glm(activity ~ ., data = samTrain, family = "poisson")
class(samTest$activity)
dataFile <- "./downloads/samsungData.rda"
# download.file(dataURL, dataFile)
# datadownloaded <- date()
# print(datadownloaded)
# rm(SamData, dataURL)
load(dataFile)
rm(dataFile)
source("Ass2_renameDupCols.R")
names(samsungData) <- names(fixDupCols(samsungData))
class(samsungData)
class(names(samsungData)
)
str(samsungData)
samsungData$activity <- as.factor(samsungData$activity)
str(samsungData)
table(samsungData$subject)
table(samsungData$activity)
fixTrain <- c(1, 3, 5, 6)
fixTest <- c(27, 28, 29, 30)
otherSubj <- unique(samsungData[! samsungData$subject %in%
c(fixTrain, fixTest),
"subject"])
set.seed(1234)
index <- 1:length(otherSubj)
trainindex <- sample(index, ceiling(length(index)/2))
otherTrain <- otherSubj[trainindex]
otherTest <- otherSubj[-trainindex]
subjTrain <- c(fixTrain, otherTrain)
subjTest <- c(fixTest, otherTest)
samTrain <- na.omit(samsungData[samsungData$subject %in% subjTrain, ])
samTest <- na.omit(samsungData[samsungData$subject %in% subjTest, ])
rm(list= ls(patter="other."))
rm(list= ls(patter="fix."))
rm(list= ls(patter="subj."))
rm(trainindex, index, samsungData)
glm1 <- glm(activity ~ ., data = samTrain, family = "poisson")
glm1 <- glm(activity ~ ., data = samTrain, family = "gaussian")
str(samTrain$activity)
table(samTrain$activity)
?tabel
?table
table(samTrain$activity, exclude= NULL )
par(mfrow=c(1,2))
number.vars <- ncol(samTrain) - 2
digits <- nchar(as.character(number.vars))
pad <- ""; for(i in 1:digits) pad = paste(pad, "0", sep="")
pb <- txtProgressBar(style=3)
par(mfrow=c(1,2))
for (i in 1){ #:number.vars){
number=paste(pad, i, sep="");
number = substring(number, nchar(number)-digits+1)
filename = paste("Ass2plots/",number,".hist.png", sep="")
png(filename)
hist(samTrain[,i], main=paste(number,names(samTrain)[i]),
xlab=paste("samTrain[,",i,"]",sep=""))
filename = paste("Ass2plots/",number,".boxp.png", sep="")
png(filename)
boxplot(samTrain[,i] ~ samTrain$activity, samTrain(number,names(data.train)[i]))
dev.off()
setTxtProgressBar(pb, i/number.vars)
}
par(mfrow=c(1,1))
close(pb)
number.vars <- ncol(samTrain) - 2
digits <- nchar(as.character(number.vars))
pad <- ""; for(i in 1:digits) pad = paste(pad, "0", sep="")
pb <- txtProgressBar(style=3)
par(mfrow=c(1,2))
for (i in 1){ #:number.vars){
number=paste(pad, i, sep="");
number = substring(number, nchar(number)-digits+1)
filename = paste("Ass2plots/",number,".hist.png", sep="")
png(filename)
hist(samTrain[,i], main=paste(number,names(samTrain)[i]),
xlab=paste("samTrain[,",i,"]",sep=""))
filename = paste("Ass2plots/",number,".boxp.png", sep="")
png(filename)
boxplot(samTrain[,i] ~ samTrain$activity,
main=paste(number,names(samTrain)[i]))
dev.off()
setTxtProgressBar(pb, i/number.vars)
}
par(mfrow=c(1,1))
close(pb)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
number.vars <- ncol(samTrain) - 2
digits <- nchar(as.character(number.vars))
pad <- ""; for(i in 1:digits) pad = paste(pad, "0", sep="")
pb <- txtProgressBar(style=3)
par(mfrow=c(1,2))
for (i in 1){ #:number.vars){
number=paste(pad, i, sep="");
number = substring(number, nchar(number)-digits+1)
filename = paste("Ass2plots/",number,".chart.png", sep="")
png(filename)
hist(samTrain[,i], main=paste(number,names(samTrain)[i]),
xlab=paste("samTrain[,",i,"]",sep=""))
boxplot(samTrain[,i] ~ samTrain$activity,
main=paste(number,names(samTrain)[i]))
dev.off()
setTxtProgressBar(pb, i/number.vars)
}
par(mfrow=c(1,1))
close(pb)
number.vars <- ncol(samTrain) - 2
digits <- nchar(as.character(number.vars))
pad <- ""; for(i in 1:digits) pad = paste(pad, "0", sep="")
pb <- txtProgressBar(style=3)
for (i in 1){ #:number.vars){
number=paste(pad, i, sep="");
number = substring(number, nchar(number)-digits+1)
filename = paste("Ass2plots/",number,".chart.png", sep="")
#png(filename)
par(mfrow=c(1,2))
hist(samTrain[,i], main=paste(number,names(samTrain)[i]),
xlab=paste("samTrain[,",i,"]",sep=""))
boxplot(samTrain[,i] ~ samTrain$activity,
main=paste(number,names(samTrain)[i]))
#dev.off()
setTxtProgressBar(pb, i/number.vars)
}
par(mfrow=c(1,1))
close(pb)
number.vars <- ncol(samTrain) - 2
digits <- nchar(as.character(number.vars))
pad <- ""; for(i in 1:digits) pad = paste(pad, "0", sep="")
pb <- txtProgressBar(style=3)
for (i in 1:number.vars){
number=paste(pad, i, sep="");
number = substring(number, nchar(number)-digits+1)
filename = paste("Ass2plots/",number,".chart.png", sep="")
#png(filename)
par(mfrow=c(1,2))
hist(samTrain[,i], main=paste(number,names(samTrain)[i]),
xlab=paste("samTrain[,",i,"]",sep=""))
boxplot(samTrain[,i] ~ samTrain$activity,
main=paste(number,names(samTrain)[i]))
#dev.off()
setTxtProgressBar(pb, i/number.vars)
}
par(mfrow=c(1,1))
close(pb)
number.vars <- ncol(samTrain) - 2
digits <- nchar(as.character(number.vars))
pad <- ""; for(i in 1:digits) pad = paste(pad, "0", sep="")
pb <- txtProgressBar(style=3)
for (i in 1){#:number.vars){
number=paste(pad, i, sep="");
number = substring(number, nchar(number)-digits+1)
filename = paste("Ass2plots/",number,".chart.png", sep="")
png(filename)
par(mfrow=c(1,2))
hist(samTrain[,i], main=paste(number,names(samTrain)[i]),
xlab=paste("samTrain[,",i,"]",sep=""))
boxplot(samTrain[,i] ~ samTrain$activity,
main=paste(number,names(samTrain)[i]))
dev.off()
setTxtProgressBar(pb, i/number.vars)
}
par(mfrow=c(1,1))
close(pb)
number.vars <- ncol(samTrain) - 2
digits <- nchar(as.character(number.vars))
pad <- ""; for(i in 1:digits) pad = paste(pad, "0", sep="")
pb <- txtProgressBar(style=3)
for (i in 1){#:number.vars){
number=paste(pad, i, sep="");
number = substring(number, nchar(number)-digits+1)
filename = paste("Ass2plots/",number,".chart.png", sep="")
#png(filename)
par(mfrow=c(1,2))
hist(samTrain[,i], main=paste(number,names(samTrain)[i]),
xlab=paste("samTrain[,",i,"]",sep=""))
boxplot(samTrain[,i] ~ samTrain$activity,
main=paste(number,names(samTrain)[i]),
las= 1)
#dev.off()
setTxtProgressBar(pb, i/number.vars)
}
par(mfrow=c(1,1))
close(pb)
number.vars <- ncol(samTrain) - 2
digits <- nchar(as.character(number.vars))
pad <- ""; for(i in 1:digits) pad = paste(pad, "0", sep="")
pb <- txtProgressBar(style=3)
for (i in 1){#:number.vars){
number=paste(pad, i, sep="");
number = substring(number, nchar(number)-digits+1)
filename = paste("Ass2plots/",number,".chart.png", sep="")
#png(filename)
par(mfrow=c(1,2))
hist(samTrain[,i], main=paste(number,names(samTrain)[i]),
xlab=paste("samTrain[,",i,"]",sep=""))
boxplot(samTrain[,i] ~ samTrain$activity,
main=paste(number,names(samTrain)[i]),
las= 3)
#dev.off()
setTxtProgressBar(pb, i/number.vars)
}
par(mfrow=c(1,1))
close(pb)
