paste0(i, ": ", rmse(yValues, lmsp$fitted))
}
for(i in 1:10) {
ns1 <- ns(xValues, df = i)
lmsp <- lm(yValues ~ ns1)
print(paste0(i, ": ", rmse(yValues, lmsp$fitted)))
}
install.packages("simpleboot")
library(simpleboot)
data(airquality)
attach(airquality)
names(airquality)
quantile(airquality$Wind, 0.75)
? one.boot
quantile(airquality$Wind, 0.75)
set.seed(883833)
getQntl <- function(x) {quantile(x, 0.75)}
one.boot(airquality$Wind, getQntl, R=1000)
?one.boot
qntlBoot <- one.boot(airquality$Wind, getQntl, R=1000)
print(qntlBoot)
boot.ci(qntlBoot)
boot.se(qntlBoot)
qntlBoot
names(qntlBoot)
qntlBoot$statistic
qntlBoot$statistic
print(qntlBoot$statistic)
qntlBoot$data
qntlBoot$t
sd(qntlBoot$t)
?sd
data(airquality)
attach(airquality)
names(airquality)
quantile(airquality$Wind, 0.75)
set.seed(883833)
getQntl <- function(x) {quantile(x, 0.75)}
qntlBoot <- one.boot(airquality$Wind, getQntl, R=1000)
sd(qntlBoot$t)
set.seed(883833)
getQntl <- function(x,i) {quantile(x[i], 0.75)}
qntlBoot <- boot(airquality$Wind, getQntl, R=1000)
qntlBoot
data(Cars93,package="MASS")
install.packages("ipred")
library(ipred)
?bagging
rmse <- function(actual, predicted) {
return(sqrt(sum((actual-predicted)^2)/length(actual)))
}
#2
library(splines)
set.seed(53535)
xValues = seq(0,2*pi,length=100)
yValues = rnorm(100) + sin(xValues)
for(i in 1:10) {
ns1 <- ns(xValues, df = i)
lmsp <- lm(yValues ~ ns1)
print(paste0(i, ": ", rmse(yValues, lmsp$fitted)))
}
#3
library(simpleboot)
data(airquality)
attach(airquality)
names(airquality)
quantile(airquality$Wind, 0.75)
set.seed(883833)
getQntl <- function(x) {quantile(x, 0.75)}
qntlBoot <- one.boot(airquality$Wind, getQntl, R=1000)
sd(qntlBoot$t)
# set.seed(883833)
# getQntl <- function(x,i) {quantile(x[i], 0.75)}
# qntlBoot <- boot(airquality$Wind, getQntl, R=1000)
# qntlBoot
#4
data(Cars93,package="MASS")
set.seed(7363)
library(ipred)
bagTree <- bagging()
install.packages("simpleboot", "ipred")
#3
library(simpleboot)
library(simpleboot)
data(airquality)
attach(airquality)
names(airquality)
quantile(airquality$Wind, 0.75)
set.seed(883833)
getQntl <- function(x) {quantile(x, 0.75)}
qntlBoot <- one.boot(airquality$Wind, getQntl, R=1000)
sd(qntlBoot$t)
names(Cars93)
data(Cars93,package="MASS")
set.seed(7363)
library(ipred)
names(Cars93)
bagTree <- bagging(DriveTrain ~ Price + Type, data=Cars93)
bagTree$mtrees[[1]]
bagTree$mtrees[[1]]$btree
newdata = data.frame(Type = "Large",Price = 20)
ll <- matrix(NA, nrow = 3, ncol = 1)
data(Cars93,package="MASS")
set.seed(7363)
library(ipred)
names(Cars93)
newdata <- data.frame(Type = "Large",Price = 20)
ll <- matrix(NA, nrow = 3, ncol = 1)
for(i in 1:3){
ss <- sample(1:dim(Cars93)[1], replace = T)
model <- tree(DriveTrain ~ Price + Type, data = Cars93)
ll[i,] <- predict(model, newdata= newdata)
}
library(tree)
data(Cars93,package="MASS")
set.seed(7363)
library(ipred)
names(Cars93)
newdata <- data.frame(Type = "Large",Price = 20)
ll <- matrix(NA, nrow = 3, ncol = 1)
for(i in 1:3){
ss <- sample(1:dim(Cars93)[1], replace = T)
model <- tree(DriveTrain ~ Price + Type, data = Cars93)
ll[i,] <- predict(model, newdata= newdata)
}
predict(model, newdata = newdata)
?predict
predict.tree
?predict.tre
??predict.tre
predict(model, newdata = newdata, type="class" )
library(tree)
data(Cars93,package="MASS")
set.seed(7363)
library(ipred)
names(Cars93)
newdata <- data.frame(Type = "Large",Price = 20)
ll <- matrix(NA, nrow = 3, ncol = 1)
for(i in 1:3){
ss <- sample(1:dim(Cars93)[1], replace = T)
model <- tree(DriveTrain ~ Price + Type, data = Cars93)
ll[i] <- predict(model, newdata = newdata, type="class" )
}
ll
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
install.packages("e1071")
library(ElemStatLearn)
library(e1071)
data(vowel.train)
data(vowel.test)
set.seed(33833)
library(randomForest)
library(randomForest)
set.seed(33833)
rf <- randomForest(y ~. data = vowel.train, prox = TRUE)
rf <- randomForest(y ~., data = vowel.train, prox = TRUE)
rf
pred_rf <- predict(rf, vowel.test)
rmse(vowel.test$y, pred_rf)
rmse <- function(actual, predicted) {
return(sqrt(sum((actual-predicted)^2)/length(actual)))
}
rmse(vowel.test$y, pred_rf)
pred_rf <- predict(rf, vowel.train)
rmse(vowel.train$y, pred_rf)
?svm
rf <- svm(y ~., data = vowel.train)
svm <- svm(y ~., data = vowel.train)
svm
pred_svm <- predict(svm, vowel.train)
rmse(vowel.train$y, pred_svm)
vowel.train$y
pred_rf <- predict(rf, vowel.train)
pred_rf <- predict(rf, vowel.test)
pred_svm <- predict(svm, vowel.test)
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
set.seed(33833)
rf <- randomForest(y ~., data = vowel.train, prox = TRUE)
#rf
pred_rf <- predict(rf, vowel.test)
rmse(vowel.train$y, pred_rf)
svm <- svm(y ~., data = vowel.train)
pred_svm <- predict(svm, vowel.test)
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
set.seed(33833)
rf <- randomForest(y ~., data = vowel.train, prox = TRUE)
#rf
pred_rf <- predict(rf, vowel.test)
#rmse(vowel.train$y, pred_rf)
svm <- svm(y ~., data = vowel.train)
pred_svm <- predict(svm, vowel.test)
#vowel.train$y
finalV <- cbind(vowel.test$y, pred_rf, pred_svm)
finalV
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
set.seed(33833)
rf <- randomForest(y ~., data = vowel.train, prox = TRUE)
#rf
pred_rf <- predict(rf, vowel.test, type="class")
#rmse(vowel.train$y, pred_rf)
svm <- svm(y ~., data = vowel.train)
pred_svm <- predict(svm, vowel.test, type="class")
#vowel.train$y
finalV <- cbind(vowel.test$y, pred_rf, pred_svm)
finalV
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
set.seed(33833)
rf <- randomForest(y ~., data = vowel.train, prox = TRUE)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
svm <- svm(y ~., data = vowel.train)
pred_svm <- predict(svm, vowel.test, type="response")
#vowel.train$y
finalV <- cbind(vowel.test$y, pred_rf, pred_svm)
finalV
?predict.randomForest
pred_rf
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
set.seed(33833)
rf <- randomForest(as.factor(y) ~., data = vowel.train, prox = TRUE)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
pred_rf
svm <- svm(as.factor(y) ~., data = vowel.train)
pred_svm <- predict(svm, vowel.test, type="response")
finalV <- cbind(vowel.test$y, pred_rf, pred_svm)
finalV
sum(finalV[,1] != finalV[,2])/length(finalV)
sum(finalV[,1] != finalV[,3])/length(finalV)
finalV_same <- finalV[, 3==2]
finalV_same <- finalV[finalV$3==finalV$2, ]
finalV_same <- finalV[finalV$col3==finalV$col2, ]
finalV_same <- finalV[finalV[,3]==finalV[,2], ]
finalV_same
sum(finalV_same[,1] != finalV_same[,2])/length(finalV_same)
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
set.seed(33833)
rf <- randomForest(as.factor(y) ~., data = vowel.train, prox = TRUE)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
pred_rf
svm <- svm(as.factor(y) ~., data = vowel.train)
pred_svm <- predict(svm, vowel.test, type="response")
#vowel.train$y
finalV <- cbind(vowel.test$y, pred_rf, pred_svm)
finalV
sum(finalV[,1] != finalV[,2])/length(finalV)
sum(finalV[,1] != finalV[,3])/length(finalV)
finalV_same <- finalV[finalV[,3]==finalV[,2], ]
finalV_same
sum(finalV_same[,1] != finalV_same[,2])/length(finalV_same)
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
set.seed(33833)
rf <- randomForest(as.factor(y) ~., data = vowel.train, prox = TRUE)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
#pred_rf
svm <- svm(as.factor(y) ~., data = vowel.train)
pred_svm <- predict(svm, vowel.test, type="response")
#vowel.train$y
finalV <- cbind(vowel.test$y, pred_rf, pred_svm)
#finalV
sum(finalV[,1] != finalV[,2])/length(finalV)
sum(finalV[,1] != finalV[,3])/length(finalV)
finalV_same <- finalV[finalV[,3]==finalV[,2], ]
#finalV_same
sum(finalV_same[,1] != finalV_same[,2])/length(finalV_same)
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
set.seed(33833)
rf <- randomForest(as.factor(y) ~., data = vowel.train, prox = TRUE)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
#pred_rf
t <- table(vowel.test$y, pred_rf)
err.rate <- 1-sum(diag(t))/sum(t)
err.rate
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
set.seed(33833)
rf <- randomForest(as.factor(y) ~., data = vowel.train, prox = TRUE)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
#pred_rf
t <- table(vowel.test$y, pred_rf)
err.rate <- 1-sum(diag(t))/sum(t)
err.rate
svm <- svm(as.factor(y) ~., data = vowel.train)
pred_svm <- predict(svm, vowel.test, type="response")
t <- table(vowel.test$y, pred_svm)
err.rate <- 1-sum(diag(t))/sum(t)
err.rate
length(finalV)
dim(finalV)[1]
finalV <- cbind(vowel.test$y, pred_rf, pred_svm)
#finalV
sum(finalV[,1] != finalV[,2])/dim(finalV)[1]
sum(finalV[,1] != finalV[,3])/dim(finalV)[1]
finalV_same <- finalV[finalV[,3]==finalV[,2], ]
#finalV_same
sum(finalV_same[,1] != finalV_same[,2])/dim(finalV_same)[1]
rf <- randomForest(as.factor(y) ~., data = vowel.train)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
#pred_rf
t <- table(vowel.test$y, pred_rf)
err.rate <- 1-sum(diag(t))/sum(t)
err.rate
set.seed(33833)
rf <- randomForest(as.factor(y) ~., data = vowel.train)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
#pred_rf
t <- table(vowel.test$y, pred_rf)
err.rate <- 1-sum(diag(t))/sum(t)
err.rate
set.seed(33833)
rf <- randomForest(y ~., data = vowel.train)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
#pred_rf
t <- table(vowel.test$y, pred_rf)
err.rate <- 1-sum(diag(t))/sum(t)
err.rate
#5
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
set.seed(33833)
rf <- randomForest(as.factor(y) ~., data = vowel.train)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
#pred_rf
t <- table(vowel.test$y, pred_rf)
err.rate <- 1-sum(diag(t))/sum(t)
err.rate
svm <- svm(as.factor(y) ~., data = vowel.train)
pred_svm <- predict(svm, vowel.test, type="response")
t <- table(vowel.test$y, pred_svm)
err.rate <- 1-sum(diag(t))/sum(t)
err.rate
#vowel.train$y
finalV <- cbind(vowel.test$y, pred_rf, pred_svm)
#finalV
sum(finalV[,1] != finalV[,2])/dim(finalV)[1]
sum(finalV[,1] != finalV[,3])/dim(finalV)[1]
finalV_same <- finalV[finalV[,3]==finalV[,2], ]
#finalV_same
sum(finalV_same[,1] != finalV_same[,2])/dim(finalV_same)[1]
#5
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
set.seed(33833)
rf <- randomForest(as.factor(y) ~., data = vowel.train)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
#pred_rf
t <- table(vowel.test$y, pred_rf)
err.rate <- 1-sum(diag(t))/sum(t)
err.rate
svm <- svm(as.factor(y) ~., data = vowel.train)
pred_svm <- predict(svm, vowel.test, type="response")
t <- table(vowel.test$y, pred_svm)
err.rate <- 1-sum(diag(t))/sum(t)
err.rate
#vowel.train$y
finalV <- cbind(vowel.test$y, pred_rf, pred_svm)
#finalV
sum(finalV[,1] != finalV[,2])/dim(finalV)[1]
sum(finalV[,1] != finalV[,3])/dim(finalV)[1]
finalV_same <- finalV[finalV[,3]==finalV[,2], ]
#finalV_same
sum(finalV_same[,1] != finalV_same[,2])/dim(finalV_same)[1]
#5
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
rf <- randomForest(y ~., data = vowel.train)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
#pred_rf
t <- table(vowel.test$y, pred_rf)
err.rate <- 1-sum(diag(t))/sum(t)
err.rate
svm <- svm(y ~ ., data = vowel.train)
pred_svm <- predict(svm, vowel.test, type="response")
t <- table(vowel.test$y, pred_svm)
err.rate <- 1-sum(diag(t))/sum(t)
err.rate
#vowel.train$y
finalV <- cbind(vowel.test$y, pred_rf, pred_svm)
#finalV
sum(finalV[,1] != finalV[,2])/dim(finalV)[1]
sum(finalV[,1] != finalV[,3])/dim(finalV)[1]
finalV_same <- finalV[finalV[,3]==finalV[,2], ]
#finalV_same
sum(finalV_same[,1] != finalV_same[,2])/dim(finalV_same)[1]
#5
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
rf <- randomForest(y ~., data = vowel.train)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
#pred_rf
svm <- svm(y ~ ., data = vowel.train)
pred_svm <- predict(svm, vowel.test, type="response")
#vowel.train$y
finalV <- cbind(vowel.test$y, pred_rf, pred_svm)
#finalV
sum(finalV[,1] != finalV[,2])/dim(finalV)[1]
sum(finalV[,1] != finalV[,3])/dim(finalV)[1]
finalV_same <- finalV[finalV[,3]==finalV[,2], ]
#finalV_same
sum(finalV_same[,1] != finalV_same[,2])/dim(finalV_same)[1]
library(ElemStatLearn)
library(e1071)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
rf <- randomForest(y ~., data = vowel.train)
#rf
pred_rf <- predict(rf, vowel.test, type="response")
#rmse(vowel.train$y, pred_rf)
#pred_rf
set.seed(33833)
svm <- svm(y ~ ., data = vowel.train)
pred_svm <- predict(svm, vowel.test, type="response")
#vowel.train$y
finalV <- cbind(vowel.test$y, pred_rf, pred_svm)
#finalV
sum(finalV[,1] != finalV[,2])/dim(finalV)[1]
sum(finalV[,1] != finalV[,3])/dim(finalV)[1]
finalV_same <- finalV[finalV[,3]==finalV[,2], ]
#finalV_same
sum(finalV_same[,1] != finalV_same[,2])/dim(finalV_same)[1]
sessioninfo()
sessininfo()
??session
sessionInfo()
library(ElemStatLearn)
library(e1071)
library(randomForest)
sessionInfo()
