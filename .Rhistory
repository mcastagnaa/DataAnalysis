version
getwd()
sum(ages == age, na.rm=T)
agecount <- function(age = NULL){
if(is.null(age)) stop("No age specificed")
else {
if(!(age > 0)) {
stop("Not a valid age")
} else {
homicides <- readLines("homicides.txt")
pattern <- paste("([0-9]+) years", sep = "")
records <- regexec(pattern, homicides)
ages <- sapply(regmatches(homicides, records), function(x) as.numeric(x[2]))
sum(ages == age, na.rm=T)
}
}
}
agecount <- function(age = NULL){
if(is.null(age)) stop("No age specificed")
else {
if(!(age > 0)) {
stop("Not a valid age")
} else {
homicides <- readLines("homicides.txt")
pattern <- paste("([0-9]+) years", sep = "")
records <- regexec(pattern, homicides)
ages <- sapply(regmatches(homicides, records), function(x) as.numeric(x[2]))
sum(ages == age, na.rm=T)
}
}
}
source("./DataAnalysis/Assignment1_home.R")
download.file(dataUrl, dataFile)
dataUrl <- "https://spark-public.s3.amazonaws.com/dataanalysis/loansData.csv"
dataFile <- "./downloads/loansData.csv"
download.file(dataUrl, dataFile)
?download.filr
?download.file
download.file(dataUrl, dataFile, extra="curl")
download.packages("Rcurl")
download.packages("RCurl")
install.packages("RCurl")
library("RCurl")
dataUrl <- "https://spark-public.s3.amazonaws.com/dataanalysis/loansData.csv"
dataFile <- "./downloads/loansData.csv"
download.file(dataUrl, dataFile, extra="curl")
download.file(dataUrl, dataFile, method="curl")
#Data Analysis Assignment no.1
#Due date 17/11
# https://class.coursera.org/dataanalysis-002/human_grading/view/courses/971332/assessments/4/submissions
# https://class.coursera.org/dataanalysis-002/human_grading/index
# WORK
#setwd("G:/GitHub/DataAnalysis")
#HOME
setwd("./DataAnalysis")
library("RCurl")
dataUrl <- "https://spark-public.s3.amazonaws.com/dataanalysis/loansData.csv"
dataFile <- "./downloads/loansData.csv"
download.file(dataUrl, dataFile, method="curl")
datadownloaded <- date()
print(datadownloaded)
rawdata <- read.csv(dataFile, as.is = TRUE)
rm(dataFile, dataUrl)
#head(rawdata)
#names transformations
names(rawdata) <- gsub("\\.","",names(rawdata))
names(rawdata) <- gsub("Ratio","",names(rawdata))
names(rawdata) <- gsub("ByInvestors","",names(rawdata))
names(rawdata) <- gsub("intheLast6Months","",names(rawdata))
names(rawdata) <- gsub("CREDIT","",names(rawdata))
names(rawdata) <- gsub("Amount","",names(rawdata))
# [1] "Requested"        "Funded"           "InterestRate"     "LoanLength"
# [5] "LoanPurpose"      "DebtToIncome"     "State"            "HomeOwnership"
# [9] "MonthlyIncome"    "FICORange"        "OpenLines"        "RevolvingBalance"
# [13] "Inquiries"        "EmploymentLength"
#dataset structure
head(rawdata)
str(rawdata)
#When NAs occour
dim(rawdata)
sum(complete.cases(rawdata))
rawdata[!complete.cases(rawdata), ]
#first pass
table(rawdata$State)
table(rawdata$FICORange)
table(rawdata$LoanLength)
range(rawdata$Requested)
range(rawdata$Funded)
# FICO ranges from 300 to 850, the higher the better. Median was 711 (2011)
# "According to a Fitch study, the accuracy of FICO in predicting delinquency
# has diminished in recent years.
# In 2001 there was an average 31-point difference in the FICO score between
# borrowers who had defaulted and those who paid on time.
# By 2006 the difference was only 10 points."
# (http://en.wikipedia.org/wiki/Credit_score_in_the_United_States)
############# DATA CLEANING
# the -0.01 funded
rawdata[rawdata$Funded == -0.01,]
quantile(rawdata$RevolvingBalance/rawdata$MonthlyIncome, na.rm= TRUE)
quantile(as.numeric(sub("%","",rawdata$DebtToIncome))/100)
rawdata$Funded <- sub("-0.01", "0", rawdata$Funded)
# homwownership = "NONE" to NA
rawdata$HomeOwnership <- sub("NONE", NA, rawdata$HomeOwnership)
############## DATA MUNGING
# Variables transformations
rawdata$DebtToIncome <- as.numeric(sub("%","",rawdata$DebtToIncome))/100
rawdata$InterestRate <- as.numeric(sub("%","",rawdata$InterestRate))/100
rawdata$Funded <- as.numeric(rawdata$Funded)
rawdata$LoanPurpose <- sub("_", " ", rawdata$LoanPurpose)
# Added variables
EmpLengthNum <- rawdata$EmploymentLength
EmpLengthNum <- sub(" year", "", EmpLengthNum)
EmpLengthNum <- sub("s", "", EmpLengthNum)
EmpLengthNum <- sub("n/a", NA, EmpLengthNum)
EmpLengthNum <- sub("< 1", "0", EmpLengthNum)
rawdata$EmpLengthNum <- as.numeric(sub("10+", "11", EmpLengthNum, fixed = TRUE))
rm(EmpLengthNum)
rawdata$LoanLengthFac <- as.factor(rawdata$LoanLength)
rawdata$HomeOwnershipFac <- as.factor(rawdata$HomeOwnership)
rawdata$LoanPurposeFac <- as.factor(rawdata$LoanPurpose)
rawdata$FICORangeFac <- as.factor(rawdata$FICORange)
rawdata$StateFac <- as.factor(rawdata$State)
rawdata$BalToIncome <- rawdata$RevolvingBalance/rawdata$MonthlyIncome
rawdata$FundedPerc <- rawdata$Funded/rawdata$Requested
rawdata$FICOmid <- sapply(strsplit(rawdata$FICORange, "-"),
function(x) (as.numeric(x[1])+as.numeric(x[2]))/2)
purposeCount <-table(rawdata$LoanPurposeFac)
rawdata <- merge(rawdata, as.data.frame(purposeCount), by.x = "LoanPurposeFac", by.y = "Var1")
names(rawdata) <- sub("Freq", "LoanPurposeFreq", names(rawdata), fixed=TRUE)
rm(purposeCount)
summary(rawdata)
sum(complete.cases(rawdata))
sum(!complete.cases(rawdata))
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac, data=rawdata, type="r")
rawdata[rawdata$InterestRate < 0.07 & rawdata$FICOmid < 720 & rawdata$LoanLengthFac == "60 months", ]
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac, data=rawdata, type=c("p","r")
)
library(lattice)
p1 <- xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type="r", color = "black")
p1 <- xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type="p")
p1+p2
library(lattice)
p1 <- xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type="r", color = "black")
p2 <- xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type="p")
p1+p2
library(lattice)
p1 <- xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type="r", col = "black")
p2 <- xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type="p")
p1 + p2
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type="r", col = "black")
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type=c("p","r"), col = "black")
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type=c("p","r")
panel.points(pch = 21, col = "black")
panel.lines(col = "black"))
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type=c("p","r"),
panel.points(pch = 21, col = "black"),
panel.lines(col = "black"))
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type=c("p","r"),
panel.points(FICOmid, InterestRate, pch = 21, col = "black"),
panel.lines(FICOmid, InterestRate, col = "red"))
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, type=c("p","r"),
panel.points(rawdata$FICOmid, rawdata$InterestRate, pch = 21, col = "black"),
panel.lines(rawdata$FICOmid, rawdata$InterestRate, col = "red"))
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21, fill = my.fill,col = "black")
panel.lmline(x,y,col = "salmon")}
)
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "salmon")}
)
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "red")}
)
?png
png("latticeRegr.png, width= 480, height= 360")
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "red")}
)
dev.off()
png("latticeRegr.png", width= 480, height= 360)
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "red")}
)
png("latticeRegr.png")#, width= 480, height= 360)
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "red")}
)
dev.off()
png("latticeRegr.png", width = 480, height = 360, units = "px")
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "red")}
)
dev.off()
png("latticeRegr.png", width = 600, height = 360, units = "px")
library(lattice)
xyplot(InterestRate ~ FICOmid | LoanLengthFac,
data=rawdata, #type=c("p","r"),
panel = function(x,y,...){
panel.xyplot(x, y, pch = 21,col = "black")
panel.lmline(x,y,col = "red")}
)
dev.off()
png("IntRatePrediction.png", width=480, height=480, units= "px")
plot(actual, predicted,
main = "Interest rate: actual vs. predicted", cex.main = 1,
yaxt = "n", xaxt = "n", cex.axis=0.75,
xlim=c(0, 0.28), ylim=c(0, 0.28), bty= "n")
axis(2, at=pretty(predicted)
, lab=paste0(pretty(predicted)*100, "%")
, las = TRUE, cex.axis=0.75)
axis(1, at=pretty(actual)
, lab=paste0(pretty(actual)*100, "%")
, las = TRUE, cex.axis=0.75)
abline(0,1, col="red")
dev.off()
# [1] "Requested"        "Funded"           "InterestRate"     "LoanLength"
# [5] "LoanPurpose"      "DebtToIncome"     "State"            "HomeOwnership"
# [9] "MonthlyIncome"    "FICORange"        "OpenLines"        "RevolvingBalance"
# [13] "Inquiries"        "EmploymentLength" "EmpLengthNum"     "LoanLengthFac"
# [17] "HomeOwnershipFac" "LoanPurposeFac"   "FICORangeFac"     "StateFac"
# [21] "BalToIncome"      "FundedPerc"       "FICOmid"          "LoanPurposeFreq"
# http://gettinggeneticsdone.blogspot.co.uk/2011/02/split-data-frame-into-testing-and.html
options(show.signif.stars = F)
completeSet <- rawdata[complete.cases(rawdata),]
set.seed(12345)
index <- 1:nrow(completeSet)
trainindex <- sample(index, trunc(length(index)/2))
trainset <- completeSet[trainindex, ]
testset <- completeSet[-trainindex, ]
str(trainset)
str(testset)
model1 <- lm(InterestRate ~
FICOmid
+ LoanLengthFac
+ OpenLines
+ Funded
+ Inquiries
+ MonthlyIncome
, data = trainset)
predicted <- predict(model1, testset)
actual <- testset$InterestRate
RMSD <- sqrt(sum((actual-predicted)^2)/length(actual))
rsq <- 1-sum((actual-predicted)^2)/sum((actual-mean(actual))^2)
print(rsq)
print(RMSD)
print(RMSD/mean(actual))
print(paste0("Prediction error: ", as.character(round(RMSD/(max(actual)-min(actual)),3)*100),"%"))
#http://en.wikipedia.org/wiki/Root-mean-square_deviation
png("IntRatePrediction.png", width=480, height=480, units= "px")
plot(actual, predicted,
main = "Interest rate: actual vs. predicted", cex.main = 1,
yaxt = "n", xaxt = "n", cex.axis=0.75,
xlim=c(0, 0.28), ylim=c(0, 0.28), bty= "n")
axis(2, at=pretty(predicted)
, lab=paste0(pretty(predicted)*100, "%")
, las = TRUE, cex.axis=0.75)
axis(1, at=pretty(actual)
, lab=paste0(pretty(actual)*100, "%")
, las = TRUE, cex.axis=0.75)
abline(0,1, col="red")
dev.off()
png("IntRatePrediction.png", width=480, height=400, units= "px")
plot(actual, predicted,
main = "Interest rate: actual vs. predicted", cex.main = 1,
yaxt = "n", xaxt = "n", cex.axis=0.75,
xlim=c(0, 0.28), ylim=c(0, 0.28), bty= "n")
axis(2, at=pretty(predicted)
, lab=paste0(pretty(predicted)*100, "%")
, las = TRUE, cex.axis=0.75)
axis(1, at=pretty(actual)
, lab=paste0(pretty(actual)*100, "%")
, las = TRUE, cex.axis=0.75)
abline(0,1, col="red")
dev.off()
data(warpbreaks)
names(warpbreaks)
anova(breaks ~ wool + tension, data= warpbreaks)
?anova
aov(breaks ~ wool + tension, data= warpbreaks)
anova1<-aov(breaks ~ wool + tension, data= warpbreaks)
summary(anova1)
library(glm2)
data(crabs)
install.packages("glm2")
library(glm2)
data(crabs)
data(quine)
lm1 = lm(log(Days + 2.5) ~.,data=quine)
step(lm1)
install.packages("quine")
install.packages("MASS")
library(MASS)
data(quine)
lm1 = lm(log(Days + 2.5) ~.,data=quine)
step(lm1)
names(crabs)
glm1 <- glm(Satellites ~ Width, data = crabs, family = "Poisson")
glm1 <- glm(Satellites ~ Width, data = crabs, family = "poisson")
summary(glm1)
glm1$coeff
glm1$coeff[2]
ln(glm1$coeff[2])
log(glm1$coeff[2])
exp(glm1$coeff[2])
exp(glm1$coeff[1] + glm1$coeff[2] * 22)
